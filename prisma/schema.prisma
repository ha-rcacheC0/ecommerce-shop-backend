generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum State {
  AL
  AK
  AZ
  AR
  CA
  CO
  CT
  DE
  FL
  GA
  HI
  ID
  IL
  IN
  IA
  KS
  KY
  LA
  ME
  MD
  MA
  MI
  MN
  MS
  MO
  MT
  NE
  NV
  NH
  NJ
  NM
  NY
  NC
  ND
  OH
  OK
  OR
  PA
  RI
  SC
  SD
  TN
  TX
  UT
  VT
  VA
  WA
  WV
  WI
  WY
}

enum Role {
  USER
  MANAGER
  MEMBER
  ADMIN
}

enum Status {
  ORDERED
  PENDING
  COMPLETED
}

enum TerminalCompany {
  FEDEX
  DHL
}

model Brand {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Color {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[] @relation("ProductColors")
}

model Effect {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[] @relation("ProductEffects")
}

model Product {
  id              String  @id @default(cuid())
  sku             String  @unique
  title           String
  description     String?
  image           String  @default("placeholder")
  videoURL        String?
  casePrice       Decimal
  isCaseBreakable Boolean @default(true)
  isShow          Boolean @default(false)
  inStock         Boolean
  package         Int[]

  brandId    String
  categoryId String

  brand    Brand    @relation(fields: [brandId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
  colors   Color[]  @relation("ProductColors")
  effects  Effect[] @relation("ProductEffects")

  cartProducts     CartProduct[]
  unitProduct      UnitProduct?
  purchaseItems    PurchaseItem[]
  breakCaseRequest BreakCaseRequest[]

  ShowProduct ShowProduct[]
}

model UnitProduct {
  id             String  @id @default(cuid())
  sku            String  @unique
  productId      String  @unique
  product        Product @relation(fields: [productId], references: [id])
  unitPrice      Decimal
  package        Int[]
  availableStock Int
}

model Show {
  id           String        @id @default(cuid())
  title        String
  description  String?
  price        Decimal
  image        String        @default("placeholder")
  videoURL     String?
  inStock      Boolean       @default(true)
  showTypeId   String
  ShowType     ShowType      @relation(fields: [showTypeId], references: [id])
  ShowProducts ShowProduct[]
}

model ShowProduct {
  id        String  @id @default(cuid())
  showId    String
  productId String
  quantity  Int
  notes     String?
  Show      Show    @relation(fields: [showId], references: [id])
  Product   Product @relation(fields: [productId], references: [id])

  @@unique([showId, productId])
}

model ShowType {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  Shows       Show[]
}

model User {
  id             String           @id @default(cuid())
  role           Role             @default(USER)
  email          String           @unique
  hashedPassword String
  createdOn      DateTime?        @default(now())
  lastLogin      DateTime?
  profile        UserProfile?
  cart           Cart?
  purchaseRecord PurchaseRecord[]
}

model UserProfile {
  id                String    @id @default(cuid())
  firstName         String?
  lastName          String?
  dateOfBirth       DateTime?
  phoneNumber       String?
  billingAddressId  String?
  shippingAddressId String?
  billingAddress    Address?  @relation(name: "BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress   Address?  @relation(name: "ShippingAddress", fields: [shippingAddressId], references: [id])
  canContact        Boolean   @default(false)
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id                   String              @id @default(cuid())
  street1              String
  street2              String?
  city                 String
  state                State
  postalCode           String
  billingUserProfiles  UserProfile[]       @relation("BillingAddress")
  shippingUserProfiles UserProfile[]       @relation("ShippingAddress")
  approvedTerminals    ApprovedTerminals[]
  purchaseRecords      PurchaseRecord[]
}

model Cart {
  id           String        @id @default(cuid())
  userId       String?       @unique
  user         User?         @relation(fields: [userId], references: [id])
  cartProducts CartProduct[]

  @@unique([id, userId])
}

model CartProduct {
  id           String  @id @default(cuid())
  caseQuantity Int     @default(0)
  cartId       String
  productId    String
  unitQuantity Int     @default(0)
  cart         Cart    @relation(fields: [cartId], references: [id])
  product      Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model PurchaseRecord {
  id              String         @id @default(cuid())
  status          Status         @default(ORDERED)
  amount          Decimal
  shippingAddress Address        @relation(fields: [addressId], references: [id])
  date            DateTime       @default(now())
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  purchaseItems   PurchaseItem[]
  addressId       String
}

model PurchaseItem {
  id             String         @id @default(cuid())
  purchaseId     String
  productId      String
  quantity       Int
  isUnit         Boolean
  purchaseRecord PurchaseRecord @relation(fields: [purchaseId], references: [id])
  product        Product        @relation(fields: [productId], references: [id])
}

model BreakCaseRequest {
  id        String   @id @default(cuid())
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model ApprovedTerminals {
  id                      String          @id @default(cuid())
  acceptOutOfStateLicence Boolean
  terminalName            String
  businessRequired        Boolean
  address                 Address         @relation(fields: [addressId], references: [id])
  addressId               String
  company                 TerminalCompany
}
