generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Effects {
  STROBES
  CRACKLES
  SIZZLES
  SNAPS
  LOUD_BANG
  WHISTLE
  FAN_EFFECTS
  WILLOWS
  SMOKE
  BROCADE
  CHRYSANTHEMUM
  COMET
  CROSSETTE
  PEARLS
  WATERFALL
  FLYING_FISH
  PALM_TREE
  PEONY
  PISTIL
  RISING_TAIL
  TOURBILLION
  GLOW
  NISHIKI_KAMURO
  GLITTER
  SNAKE
  CONFETTI
}

enum Colors {
  GREEN
  RED
  BLUE
  ORANGE
  YELLOW
  PURPLE
  PINK
  WHITE
  SILVER
  BLACK
  BROWN
  GOLD
}

enum Category {
  ASSORTMENT
  FIRECRACKERS
  SNAKE_SMOKE
  TOY_NOVELTIES_STROBES
  CONE_FLORAL
  GROUND
  FLYING_HELICOPTERS
  REPEATERS_200_GRAM
  REPEATERS_500_GRAM
  TUBES
  RELOADABLES
  PARACHUTES
  BOTTLE_ROCKETS
  ROCKETS_MISSLES
  SPARKLERS
  PINWHEELS
  ROMAN_CANDLES
  FOUNTAINS
  GENDER_REVEAL
  FUSE
  SUPPLIES_VISIBILITY
  CONFETTI_SHOOTERS_AIR_COMPRESSED
}

enum Brand {
  BOOM_WOW
  SKY_SLAM
  STARGET
  SKY_PIONEER
  SKY_EAGLE
  ALPHA_FIREWORKS
  MIGHTY_MAX
  MAD_OX
  T_SKY
  MC_FIREWORKS
  RED_LANTERN
  MIRACLE
  LEGEND
  TOPGUN
  WINDA
  SIN_CITY
  HAPPY_FAMILY
  HOP_KEE
  PYRO_DIABLO
  GENERIC
  RACCOON
  PYRO_MOOI
  KRIPTON_FIREWORKS
  BUM_BUM
  SHOGUN
  WISE_GUY
  BLACK_SCORPION
  CRZ
  CSS
  BROTHERS
  DOMINATOR
  MUSCLE_PACK
  SKIES_THE_LIMIT
  DUCK
  PYRO_PIRATE
  IRONMAN
  BEIHAI_POPPOP
  BOOMER
  FIREHAWK
  SKY_PAINTER
  GALAXY_FIREWORKS
  FOX_FIREWORKS
  SUNS_FIREWORKS
}

enum State {
  AL
  AK
  AZ
  AR
  CA
  CO
  CT
  DE
  FL
  GA
  HI
  ID
  IL
  IN
  IA
  KS
  KY
  LA
  ME
  MD
  MA
  MI
  MN
  MS
  MO
  MT
  NE
  NV
  NH
  NJ
  NM
  NY
  NC
  ND
  OH
  OK
  OR
  PA
  RI
  SC
  SD
  TN
  TX
  UT
  VT
  VA
  WA
  WV
  WI
  WY
}

enum Role {
  USER
  MANAGER
  MEMBER
  ADMIN
}

enum Status {
  ORDERED
  PENDING
  COMPLETED
}

enum TerminalCompany {
  FEDEX
  DHL
}

model Product {
  id               String             @id @default(cuid())
  sku              Int                @unique
  title            String
  description      String?
  image            String             @default("placeholder")
  videoURL         String?
  casePrice        Decimal
  isCaseBreakable  Boolean            @default(true)
  inStock          Boolean
  package          Int[]
  categoriesId     String
  brandsId         String
  Brands           Brands             @relation(fields: [brandsId], references: [id])
  Categories       Categories         @relation(fields: [categoriesId], references: [id])
  ColorStrings     ColorStrings[]     @relation("ColorStringsToProduct")
  EffectStrings    EffectStrings[]    @relation("EffectStringsToProduct")
  CartProduct      CartProduct[]
  UnitProduct      UnitProduct?
  UnitProductId    Int?               @unique
  PurchaseItem     PurchaseItem[]
  BreakCaseRequest BreakCaseRequest[]

  @@unique([id, categoriesId])
}

model UnitProduct {
  id             String  @id @default(cuid())
  sku            String  @unique
  productId      String  @unique
  Product        Product @relation(fields: [productId], references: [id])
  unitPrice      Decimal
  package        Int[]
  availableStock Int
}

model EffectStrings {
  id      String    @id @default(cuid())
  name    Effects   @unique
  Product Product[] @relation("EffectStringsToProduct")
}

model ColorStrings {
  id      String    @id @default(cuid())
  name    Colors    @unique
  Product Product[] @relation("ColorStringsToProduct")
}

model Categories {
  id      String    @id @default(cuid())
  name    Category  @unique
  Product Product[]
}

model Brands {
  id      String    @id @default(cuid())
  name    Brand     @unique
  Product Product[]
}

model User {
  id             String           @id @default(cuid())
  role           Role             @default(USER)
  email          String           @unique
  hashedPassword String
  createdOn      DateTime?        @default(now())
  lastLogin      DateTime?
  profiles       UserProfile?
  Cart           Cart?
  PurchaseRecord PurchaseRecord[]
}

model UserProfile {
  id                String    @id @default(cuid())
  firstName         String?
  lastName          String?
  dateOfBirth       DateTime?
  phoneNumber       String?
  billingAddressId  String?
  shippingAddressId String?
  billingAddress    Address?  @relation(name: "BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress   Address?  @relation(name: "ShippingAddress", fields: [shippingAddressId], references: [id])
  canContact        Boolean   @default(false)
  userId            String    @unique
  User              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
  id                   String              @id @default(cuid())
  street1              String
  street2              String?
  city                 String
  state                State
  postalCode           String
  billingUserProfiles  UserProfile[]       @relation("BillingAddress")
  shippingUserProfiles UserProfile[]       @relation("ShippingAddress")
  ApprovedTerminals    ApprovedTerminals[]
  PurchaseRecord       PurchaseRecord[]
}

model Cart {
  id           String        @id @default(cuid())
  userId       String?       @unique
  User         User?         @relation(fields: [userId], references: [id])
  CartProducts CartProduct[]

  @@unique([id, userId])
}

model CartProduct {
  id           String  @id @default(cuid())
  caseQuantity Int     @default(0)
  cartId       String
  productId    String
  unitQuantity Int     @default(0)
  Cart         Cart    @relation(fields: [cartId], references: [id])
  Product      Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model PurchaseRecord {
  id              String         @id @default(cuid())
  status          Status         @default(ORDERED)
  amount          Decimal
  shippingAddress Address        @relation(fields: [addressId], references: [id])
  date            DateTime       @default(now())
  userId          String
  User            User           @relation(fields: [userId], references: [id])
  PurchaseItems   PurchaseItem[]
  addressId       String
}

model PurchaseItem {
  id             String         @id @default(cuid())
  purchaseId     String
  productId      String
  quantity       Int
  isUnit         Boolean
  PurchaseRecord PurchaseRecord @relation(fields: [purchaseId], references: [id])
  Product        Product        @relation(fields: [productId], references: [id])
}

model BreakCaseRequest {
  id        String   @id @default(cuid())
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  Product   Product  @relation(fields: [productId], references: [id])
}

model ApprovedTerminals {
  id                      String          @id @default(cuid())
  acceptOutOfStateLicence Boolean
  terminalName            String
  businessRequired        Boolean
  Address                 Address         @relation(fields: [addressId], references: [id])
  addressId               String
  company                 TerminalCompany
}
